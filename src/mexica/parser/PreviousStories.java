/* Generated By:JavaCC: Do not edit this line. PreviousStories.java */
package mexica.parser;

import java.io.*;
import java.util.*;
import mexica.*;
import mexica.CharacterName;
import mexica.core.*;
import mexica.engagement.parser.PreviousStory;
import mexica.social.SocialAction;
import mexica.social.SocialStatus;
import mexica.story.*;

public class PreviousStories implements PreviousStoriesConstants {
    private List<PreviousStory> stories;
    private PreviousStory story;
    private ActionStore actionStore;
    private boolean DEBUG_ACTIONS = true;
            
    public PreviousStories(ActionStore actions) throws FileNotFoundException {
        this(actions, MexicaParameters.PREV_STORIES_FILE);
    }
    
    public PreviousStories(ActionStore actions, File file) throws FileNotFoundException {
       this(new FileInputStream(file));
       actionStore = actions;
       stories = new ArrayList<PreviousStory>();
       //MexicaParameters.ENABLE_ILLOGICAL_ACTIONS = true;
   }

    public PreviousStories(ActionStore actions, String path) throws FileNotFoundException {
       //this(PreviousStories.class.getClassLoader().getResourceAsStream(path));
       this(new FileInputStream(path));
       actionStore = actions;
       stories = new ArrayList<PreviousStory>();
       //MexicaParameters.ENABLE_ILLOGICAL_ACTIONS = true;
   }

    public List<PreviousStory> getStories() {
        return stories;
    }

    public static void main(String[] args) throws ParseException, TokenMgrError, FileNotFoundException {
        //System.out.println("Analyzing previous stories");
        MexicaRepository.getInstance().loadData();
        MexicaParameters.ENABLE_ILLOGICAL_ACTIONS = true;
        ActionStore store = MexicaRepository.getInstance().getActions();
        PreviousStories parser = new PreviousStories(store, MexicaParameters.PREV_STORIES_FILE);
        parser.Start();
    }

    public void composite(Token gossipperToken, Token performerToken, Token actionNameToken, Token receiverToken) {
        Action realizedAction, action;
        ActionInstantiated instance, realizedInstance;
        CharacterName gossipper, performer, receiver;

        //Create the realized action
        realizedAction = new Action();
        realizedAction.setActionName("Realised");
        realizedAction.setNoCharacters(1);
        action = actionStore.getAction(actionNameToken.image);

        //Retrieve the characters
        gossipper = CharacterName.valueOfIgnoreCase(gossipperToken.image);
        performer = CharacterName.valueOfIgnoreCase(performerToken.image);
        if (receiverToken != null) {
            receiver = CharacterName.valueOfIgnoreCase(receiverToken.image);
            instance = new ActionInstantiated(action, performer, receiver);
            action = new CompositeAction(realizedAction, instance);
            realizedInstance = new ActionInstantiated(action, gossipper, performer, receiver);
        }
        else {
            instance = new ActionInstantiated(action, performer);
            action = new CompositeAction(realizedAction, instance);
            realizedInstance = new ActionInstantiated(action, gossipper, performer);
        }

        story.addAction(realizedInstance);
    }

    public void action(Token performerToken, Token actionNameToken, Token receiverToken) {
        Action action;
        ActionInstantiated instance;
        CharacterName performer, receiver;
        receiver = CharacterName.Not_Defined;

        if (actionNameToken.image.equalsIgnoreCase("actor"))
            return;

        //Create the action
        if (DEBUG_ACTIONS)
            System.out.println("\tAction: " + actionNameToken.image);
        action = actionStore.getAction(actionNameToken.image);

        //Retrieve the characters
        performer = CharacterName.valueOfIgnoreCase(performerToken.image);
        try {
            if (receiverToken != null) {
                receiver = CharacterName.valueOfIgnoreCase(receiverToken.image);
                if (DEBUG_ACTIONS) System.out.println("\t" + performer + " " + action + " " + receiver);
                instance = new ActionInstantiated(action, performer, receiver);
            }
            else {
                if (DEBUG_ACTIONS) System.out.println("\t" + performer + " " + action);
                instance = new ActionInstantiated(action, performer);
            }
            if (action instanceof SocialAction) {
                List<ActionInstantiated> actions = story.getActions();
                ActionInstantiated lastAction = actions.get(actions.size()-1);
                lastAction.setSocialAction(instance);
            }
            else
                story.addAction(instance);
        } catch (NullPointerException npe) {
            System.out.println("\nInvalid action: " + performer + " " + action + " " + receiver);
        }
    }

    @Deprecated
    public void socialAction(Token performer, Token actionName, Token receiver,
                             Token generalizableCharacter, Token relation, Token socialNorm, Token owner) {
        List<ActionInstantiated> actions = story.getActions();
        ActionInstantiated instance = actions.get(actions.size()-1);
        SocialCharacter socialCharacter = SocialCharacter.parse(generalizableCharacter.image, relation.image);
        SocialStatus socialStatus = SocialStatus.parse(socialNorm.image);
        CharacterName contextOwner;
        contextOwner  = (owner != null) ? CharacterName.valueOf(owner.image) : CharacterName.valueOf(performer.image);
        //instance.setSocialData(socialCharacter, actionName.image, socialStatus, contextOwner);
    }

  final public void Start() throws ParseException {
  Token initialLocation = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STORY_ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(STORY_ID);
      jj_consume_token(NEW_LINE);
      initialLocation = jj_consume_token(STORY_BEGIN);
        story = new PreviousStory();
        String location = initialLocation.image.replace("START", "").trim();
        if (location.length() > 0)
            story.setInitialLocation(location);
      jj_consume_token(NEW_LINE);
      if (DEBUG_ACTIONS) System.out.println("NEW STORY");
      parseStory();
      jj_consume_token(NEW_LINE);
        stories.add(story);
    }
    jj_consume_token(END_OF_FILE);

  }

  final public void parseStory() throws ParseException {
  Token firstCharacter = null;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOCIAL_MARKER:
      case WORD:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WORD:
        firstCharacter = jj_consume_token(WORD);
        jj_consume_token(SPACE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REALISED:
          analyzeComposite(firstCharacter);
          break;
        case WORD:
          analyzeAction(firstCharacter);
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case SOCIAL_MARKER:
        analyzeSocialAction();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void analyzeComposite(Token gossipper) throws ParseException {
  Token performer = null, receiver = null, actionName = null;
    jj_consume_token(REALISED);
    jj_consume_token(SPACE);
    performer = jj_consume_token(WORD);
    jj_consume_token(SPACE);
    actionName = jj_consume_token(WORD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPACE:
      jj_consume_token(SPACE);
      receiver = jj_consume_token(WORD);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(NEW_LINE);
        composite(gossipper, performer, actionName, receiver);
  }

  final public void analyzeAction(Token performer) throws ParseException {
  Token receiver = null, actionName = null;
    actionName = jj_consume_token(WORD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPACE:
      jj_consume_token(SPACE);
      receiver = jj_consume_token(WORD);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(NEW_LINE);
        action(performer, actionName, receiver);
  }

  final public void analyzeSocialAction() throws ParseException {
  Token performer = null, receiver = null, socialAction = null, generalizableCharacter = null,
        relation = null, socialNorm = null, owner = null;
    jj_consume_token(SOCIAL_MARKER);
    jj_consume_token(SPACE);
    performer = jj_consume_token(WORD);
    jj_consume_token(SPACE);
    socialAction = jj_consume_token(WORD);
    jj_consume_token(SPACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WORD:
      receiver = jj_consume_token(WORD);
      jj_consume_token(SPACE);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    generalizableCharacter = jj_consume_token(NON_GENERALIZABLE_CHARACTER);
    jj_consume_token(SPACE);
    relation = jj_consume_token(RELATION_TYPE);
    jj_consume_token(SPACE);
    socialNorm = jj_consume_token(SOCIAL_NORM_TYPE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPACE:
      jj_consume_token(SPACE);
      owner = jj_consume_token(WORD);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(NEW_LINE);
        socialAction(performer, socialAction, receiver, generalizableCharacter, relation, socialNorm, owner);
  }

  /** Generated Token Manager. */
  public PreviousStoriesTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x4400,0x4040,0x4400,0x10,0x10,0x4000,0x10,};
   }

  /** Constructor with InputStream. */
  public PreviousStories(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PreviousStories(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PreviousStoriesTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PreviousStories(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PreviousStoriesTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PreviousStories(PreviousStoriesTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PreviousStoriesTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
